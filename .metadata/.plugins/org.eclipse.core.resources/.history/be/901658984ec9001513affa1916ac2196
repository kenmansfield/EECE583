/*
 * Assignment2.cpp
 *
 *  Created on: Jan 31, 2016
 *      Author: km
 */
#include <iostream>
#include <fstream>
#include <stdio.h>
#include <vector>
#include <unistd.h>
#include "graphics.h"
#include <string>
#include <sstream>
#include <algorithm>
#include "Assignment2.hpp"
using namespace std;

float sBoxDim = 0;
static const int WIDTH = 1000;
float TOP_BORDER = 60;

int sNumCells = 0;
int sNumConnection = 0;
int sNumRows = 0;
int sNumColumns = 0;

//These are modifiers based on the different modes selected by the user.
static float sDelayModifier = 1.0f;
static bool sNoAnimation = false;
static bool sfinalAnimation = true;

bool ReadNetFile(string fileName)
{
    ifstream infile;
    infile.open(fileName.c_str());
    int lineNumber = 0;

    vector< vector<int> > vNetFile;

    std::string line;

    if(!infile.is_open())
    {
        return 0;
    }

    int i = 0;
    while( getline(infile, line) )
    {
    	vector<int> tempVec;
        istringstream lineStream(line);
        int x;
        while(lineStream >> x)
        {
        	tempVec.push_back(x);
        }
        vNetFile.push_back(tempVec);
        i++;
    }
    cout << "hello world!!\n";

    for(int i = 0; i < vNetFile.size(); i++)
    {
    	for(int j = 0; j < vNetFile.at(i).size(); j++)
    	{
    		cout << vNetFile.at(i).at(j) << " ";
    	}

    	cout << endl;

    }
    return ParseNetFile(vNetFile);
}

bool ParseNetFile(vector< vector<int> > vNetFile)
{
	sNumCells = vNetFile.at(0).at(0);
	sNumConnection = vNetFile.at(0).at(1);
	sNumRows = vNetFile.at(0).at(2);
	sNumColumns = vNetFile.at(0).at(3);

	vNetFile.erase(vNetFile.begin());
}

void DrawGrid()
{
	int boxSize;
	setfontsize (6);
	setlinestyle (SOLID);
	setlinewidth (2);
	setcolor (BLACK);

	sBoxDim = WIDTH/(sNumRows * 2 + 1);

	for(int i = 0; i < sNumColumns; i++)
	{
		for(int j = 0; j < sNumRows; j++)
		{
			ColourRect(Point(i,j));
		}
		flushinput();
	}
	Point x;
}

void DrawNumbers(Point p)
{
	setcolor (BLACK);
	//I think this is the top left, so need to offset it to the centre. And also make sure the font size is suitable.
	GetLocationToDraw(p);
}

static void setTextFill(Vertice v, string text, int color)
{
    if(sNoAnimation)
    {
        return;
    }
    setcolor(color);
    drawtext(v.x, v.y, text, 150);
    flushinput();
}

Point GetLocation(Point p)
{
	//There is one space between each row for the routing.
	int yOffset = (int(p.y - 1));
	int posY = (p.y) + yOffset;
	int posX = p.x;

	Point location(posX, posY);
	return location;
}

Vertice GetLocationToDraw(Point P)
{
	Point tempPoint = GetLocation(P);
	return Vertice(sBoxDim * float(tempPoint.x), sBoxDim * float(tempPoint.y));
}

void ColourRect(Point x)
{
	setlinestyle (SOLID);
	setlinewidth (1);
	setcolor (BLACK);

	Vertice v = GetLocationToDraw(x);
	float offset = sBoxDim/2;
	drawrect (v.x, v.y + TOP_BORDER, v.x + sBoxDim, v.y + sBoxDim + TOP_BORDER);
}

void InitGraphics()
{
	init_graphics("Lee-Moore Routing");

    //clearscreen();
    update_message("Simulated Annealing.");
    setcolor (RED);
    setlinewidth(0);
    setlinestyle (DASHED);
    init_world (0.,0.,WIDTH,WIDTH);

}

void Delay(int time)
{
    //convert from milliseconds to useconds
    if(sDelayModifier == 0)
    {
        return;
    }
    usleep(time * 1000 * sDelayModifier);
}

int main (int argc, char *argv[])
{
	string FileName = "alu2.txt";
	ReadNetFile(FileName);
	InitGraphics();
	DrawGrid();

    while(true) {Delay(1000);}
}

